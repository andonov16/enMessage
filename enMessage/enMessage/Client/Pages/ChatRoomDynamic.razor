@page "/chatdynamic/{userid}/{chatid}"
@using Microsoft.AspNetCore.SignalR.Client
@using enMessage.Shared.ViewModels
@inject NavigationManager NavManager
@inject HttpClient client
@implements IAsyncDisposable


<div>
    <label>
        Chat:@chat.ChatName
    </label>
</div>

<div>
    <label>
        User:@me.Username
    </label>
</div>

<div>
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string userID{ get; set; }
    [Parameter]
    public string chatID{ get; set; }
    private UserViewModel me;
    private ChatViewModel chat;

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        await InitializeViewModelsAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
    }


    protected async Task InitializeViewModelsAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + userID);
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
    }






    private async Task Send()
    {
        if(string.IsNullOrEmpty(messageInput))
        {
            return;
        }

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", me.Username, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}