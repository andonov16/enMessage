
@page "/friends/{userid}"
@using enMessage.Shared.ViewModels
@inject IJSRuntime JsRuntime
@inject HttpClient client
@inject NavigationManager NavManager

<div class="container">
    <aside>
        <nav class="grid-container">
            <button class="nav-button" onclick="@GoToHome">Home</button>
            <button class="nav-button"  onclick="@GoToCreateChat">Create chat</button>
            <button class="nav-button active-button" onclick="@GoToFriends">Friends</button>
            <button class="nav-button" onclick="@Logout">Logout</button>
        </nav>
    </aside>

    <main>
        <div class="login-container request-sender-container">
            <form class="login-form" onsubmit="@SendRequestAsync">
                <input @bind = "requestUsername" placeholder="username"/>
                <button>Send friend request</button>
            </form>

        </div>

        <div class="friend-panel">
            <div class="friends-wrapper">
                <ul class="friend-holder">
                    @if(me != null)
                    {
                        <h3 class="login friend-title">Requests</h3>
                        @foreach(var req in me.Requests)
                        {
                            var currentRequestID = req.ID;
                            <li class = "friend-request">
                                <span class="friend-username">@req.RequestedFrom</span>
                                <span><button class="btn-success" @onclick="@(e => AcceptRequestAsync(req.ID.ToString()))">Accept</button></span>
                                <span><button class="btn-danger" @onclick="@(e => DeclineRequestAsync(req.ID.ToString()))">Decline</button></span>
                            </li>
                        }
                    }
                </ul>
            </div>

    
            <div class="friends-wrapper">
                <ul class="friend-holder">
                    @if(me != null)
                    {
                        <h3 class="login friend-title">Friends</h3>
                        @foreach(var friend in me.Friends)
                        {
                            <li class = "friend-request friend-username">@friend.Username</li>
                        }
                    }
                </ul>
            </div>
        </div>
    </main>
</div>






@code {
    [Parameter]
    public string UserId { get; set; }
    private UserViewModel me;
    private string username = string.Empty;
    private string requestUsername;

    protected override async Task OnInitializedAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + UserId);
        username = me.Username;
    }

    protected async void SendRequestAsync()
    {
        if(string.IsNullOrEmpty(requestUsername))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter a username first!");
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Post, "/api/users/request/" + UserId + "/" + requestUsername);
        var response = await client.SendAsync(request);

        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Request sent sucesfully!");
        }else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Request could not be sent! " + await response.Content.ReadAsStringAsync());
        }
    }

    protected async void AcceptRequestAsync(string requestID)
    {
        var request = new HttpRequestMessage(HttpMethod.Put, "/api/users/acceptfriend/" + UserId +  "/" + requestID);
        var response = await client.SendAsync(request);

        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Request Accepted!!");
            NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
        }else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error occured! " + await response.Content.ReadAsStringAsync());
        }
    }
    
    protected async void DeclineRequestAsync(string requestID)
    {
        var request = new HttpRequestMessage(HttpMethod.Delete, "/api/requests/" + requestID);
        var response = await client.SendAsync(request);

        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Request declined!!");
            NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
        }else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error occured! " + await response.Content.ReadAsStringAsync());
        }
    }




    protected void GoToCreateChat()
    {
        NavManager.NavigateTo("createchat/" + UserId);
    }

    protected void GoToFriends()
    {
        NavManager.NavigateTo("friends/" + UserId);
    }

    protected void GoToHome()
    {
        NavManager.NavigateTo("user/" + UserId);
    }

    protected void GoToUser()
    {
        NavManager.NavigateTo("user/" + UserId);
    }

    protected void Logout()
    {
        NavManager.NavigateTo("/");
    }
}
