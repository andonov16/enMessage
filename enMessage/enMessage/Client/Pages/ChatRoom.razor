@page "/chat/{userid}/{chatid}"
@using Microsoft.AspNetCore.SignalR.Client
@using enMessage.Shared.ViewModels
@using enMessage.Shared.Utilities
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient client


<h3>ChatRoom: @chat.ChatName</h3>
<h4>User: @me.Username</h4>

<form @onsubmit="@SendMessage">
    <input @bind="@messageInput" />
    <button>Send</button>
</form>

<ul>
    @foreach(var m in chat.Messages)
    {
        <li>
            <label>@m.SentBy.Username :</label>
            <div><p>@m.Content</p></div>
            <div><label>@m.SentOn</label></div>
        </li>
    }
</ul>

@code {
    [Parameter]
    public string userID{ get; set; }
    [Parameter]
    public string chatID{ get; set; }
    private UserViewModel me;
    private ChatViewModel chat;
    private string messageInput = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        await InitializeViewModelsAsync();
    }


    protected async Task InitializeViewModelsAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + userID);
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
    }

    protected async Task ReloadChatAsync()
    {        
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
    }


    protected async Task SendMessage()
    {
        if(string.IsNullOrEmpty(messageInput))
        {
            return;
        }

        var encrypted = messageInput;

        var request = new HttpRequestMessage(HttpMethod.Post, "/api/messages/" + userID +  "/" + chatID + "/text/"+ encrypted);
        var response = await client.SendAsync(request);
        await ReloadChatAsync();
    }
}
