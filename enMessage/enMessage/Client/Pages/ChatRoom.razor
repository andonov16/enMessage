@page "/chat/{userid}/{chatid}"
@using Microsoft.AspNetCore.SignalR.Client
@using enMessage.Shared.ViewModels
@using enMessage.Shared.Utilities
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient client


<h3>ChatRoom: @chatname</h3>
<h4>User: @username</h4>


<form @onsubmit="@SendMessage">
    <input @bind="@messageInput" />
    <button>Send</button>
</form>

<ul>
    @if(me != null)
    {
        @foreach(var m in chat.Messages)
        {
            <li>
                <label>@m.SentBy.Username :</label>
                <div><p>@m.Content</p></div>
                <div><label>@m.SentOn</label></div>
                <button @onclick="@(async() => await DeleteMessageAsync(m.ID))">Delete message</button>
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public string userID{ get; set; }
    [Parameter]
    public string chatID{ get; set; }
    private UserViewModel me;
    private ChatViewModel chat;
    private string messageInput = string.Empty;
    private string username = string.Empty;
    private string chatname = string.Empty;


    private System.Threading.Timer? timer;



    protected override async Task OnInitializedAsync()
    {
        await InitializeViewModelsAsync();
        await SetupTimerAsync();
    }


    protected async Task InitializeViewModelsAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + userID);
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
        username = me.Username;
        chatname = chat.ChatName;
    }

    protected async Task ReloadChatAsync()
    {        
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
    }

    protected async Task SetupTimerAsync()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await ReloadChatAsync();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 1500, 1500);
    }


    protected async Task SendMessage()
    {
        if(string.IsNullOrEmpty(messageInput))
        {
            return;
        }

        var encrypted = messageInput;

        var request = new HttpRequestMessage(HttpMethod.Post, "/api/messages/" + userID +  "/" + chatID + "/text/"+ encrypted);
        var response = await client.SendAsync(request);
        await ReloadChatAsync();

        messageInput = string.Empty;
    }


    protected async Task DeleteMessageAsync(Guid messageID)
    {
        var response = await client.DeleteAsync("api/messages/" + userID + "/" + chatID + "/" + messageID);
        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Message deleted successfully!");
            await ReloadChatAsync();   
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Only admins can delete messages! ");          
        }
    }
}
