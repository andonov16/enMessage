@page "/chat/{userid}/{chatid}"
@using Microsoft.AspNetCore.SignalR.Client
@using enMessage.Shared.ViewModels
@using enMessage.Shared.Utilities
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient client





@if(me != null && chat != null)
{
    <header>
		<img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1940306/chat_avatar_01.jpg" alt="">
		<div>
			<h2>@chat.ChatName</h2>
			<h3>@chat.LastInteraction</h3>
		</div>
	</header>


	<ul id="chat">

        @foreach(var m in chat.Messages)
        {
            if(m.SentBy.ID == me.ID)
            {
                 <li class="me">
                     <div class="entete">
				        <h2>@m.SentBy.Username</h2>
			        </div>

                    <div class="entete">
				        <h3>@m.SentOn</h3>
                    </div>


			        <div class="message">
				        @m.Content
                        <div>
                            <button class="delete-button" @onclick="@(async() => await DeleteMessageAsync(m.ID))">Delete message</button>
                        </div>
			        </div>
                 </li>
            }
            else
            {
                 <li class="you">
                     <div class="entete">
				        <h2>@m.SentBy.Username</h2>
			        </div>
                    <div class="entete">
				        <h3>@m.SentOn</h3>
                    </div>

			        <div class="message">
				        @m.Content
                        <div>
                            <button class="delete-button" @onclick="@(async() => await DeleteMessageAsync(m.ID))">Delete message</button>
                        </div>
			        </div>
                 </li> 
            }
        }
    </ul>
	<footer>
        <form @onsubmit="@SendMessage" class="form-footer">
            <textarea class="message-field" @bind="@messageInput" />
            <button class="btn-success" style="width: 10%; margin: 1rem;">Send</button>
        </form>
	</footer>
}


@code {
    [Parameter]
    public string userID{ get; set; }
    [Parameter]
    public string chatID{ get; set; }
    private UserViewModel me;
    private ChatViewModel chat;
    private string messageInput = string.Empty;
    private string username = string.Empty;
    private string chatname = string.Empty;


    private System.Threading.Timer? timer;



    protected override async Task OnInitializedAsync()
    {
        await InitializeViewModelsAsync();
        await SetupTimerAsync();
    }


    protected async Task InitializeViewModelsAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + userID);
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
        username = me.Username;
        chatname = chat.ChatName;
    }

    protected async Task ReloadChatAsync()
    {        
        chat = await client.GetFromJsonAsync<ChatViewModel>("api/chats/" + chatID);
    }

    protected async Task SetupTimerAsync()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await ReloadChatAsync();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 1500, 1500);
    }


    protected async Task SendMessage()
    {
        if(string.IsNullOrEmpty(messageInput))
        {
            return;
        }

        var encrypted = messageInput;

        var request = new HttpRequestMessage(HttpMethod.Post, "/api/messages/" + userID +  "/" + chatID + "/text/"+ encrypted);
        var response = await client.SendAsync(request);
        await ReloadChatAsync();

        messageInput = string.Empty;
    }


    protected async Task DeleteMessageAsync(Guid messageID)
    {
        var response = await client.DeleteAsync("api/messages/" + userID + "/" + chatID + "/" + messageID);
        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Message deleted successfully!");
            await ReloadChatAsync();   
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Only admins can delete messages! ");          
        }
    }
}
