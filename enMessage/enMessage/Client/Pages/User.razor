@page "/user/{userid}"
@using enMessage.Shared.ViewModels
@inject IJSRuntime JsRuntime
@inject HttpClient client
@inject NavigationManager NavManager


<div id="container">
	<aside>
        <nav class="grid-container">
            <button class="nav-button active-button">Home</button>
            <button class="nav-button" onclick="@GoToCreateChat">Create chat</button>
            <button class="nav-button" onclick="@GoToFriends">Friends</button>
            <button class="nav-button" onclick="@Logout">Logout</button>
        </nav>

		@if(me != null){
			<ul>
				@foreach(var chat in me.Chats.OrderByDescending(c => c.LastInteraction))
				{									
					<li @onclick="@(() => GoToChatRoom(chat.ID))">
						<img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1940306/chat_avatar_01.jpg" alt="">
							<div>
								<h2>@chat.ChatName</h2>
								<h3>
									<span class="status green"></span>
									@chat.LastInteraction
								</h3>
						</div>
					</li>
				}
			</ul>
		}
	</aside>
</div>



@code {
    [Parameter]
    public string UserId { get; set; }
    private string username = string.Empty;
    private UserViewModel me;


    protected override async Task OnInitializedAsync()
    {
        me = await client.GetFromJsonAsync<UserViewModel>("api/users/" + UserId);
        username = me.Username;
    }

    protected void GoToChatRoom(Guid id)
    {
        NavManager.NavigateTo("chat/" +UserId + "/" + id);
    }

    protected void GoToCreateChat()
    {
        NavManager.NavigateTo("createchat/" + UserId);
    }

    protected void GoToFriends()
    {
        NavManager.NavigateTo("friends/" + UserId);
    }

    protected void Logout()
    {
        NavManager.NavigateTo("/");
    }
}
